name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Set environment variables from GitHub secrets for database credentials and Firebase
    env:
      PGDATABASE: ${{ secrets.PGDATABASE }} # e.g. "bean_remote_test"
      PGUSER: ${{ secrets.PGUSER }} # e.g. "zdvman"
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
    # Configure PostgreSQL database service (with PostGIS)
    services:
      postgres:
        image: postgis/postgis:15-3.3 # Postgres 15 with PostGIS extension&#8203;:contentReference[oaicite:0]{index=0}
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
        ports:
          - 5432:5432
        # Wait for PostgreSQL service to be healthy before proceeding&#8203;:contentReference[oaicite:1]{index=1}
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install dependencies
        run: npm ci

      - name: Initialize database (enable PostGIS)
        run: |
          # Create PostGIS extension in the test database
          psql -h localhost -U $PGUSER -d $PGDATABASE -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        env:
          PGPASSWORD: ${{ secrets.PGPASSWORD }}

      - name: Run tests
        run: npm test

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    # Only run the deploy job on push events to the main branch
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Trigger deployment
        # Use the deploy hook URL from secrets to initiate deployment
        run: |
          curl -X POST "${{ secrets.DEPLOY_HOOK_URL }}"
